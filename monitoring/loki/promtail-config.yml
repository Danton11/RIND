server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker container logs for DNS servers
  - job_name: docker-dns-containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: ["rind-dns-primary", "rind-dns-secondary"]
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        target_label: 'container_name'
      - source_labels: ['__meta_docker_container_name']
        target_label: 'service'
        regex: 'rind-dns-(.*)'
        replacement: 'dns-server-${1}'
      - source_labels: ['__meta_docker_container_id']
        target_label: 'container_id'
        regex: '(.{12})'
        replacement: '${1}'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'stream'
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            target: target
            filename: filename
            line_number: line_number
            threadId: threadId
      - labels:
          level:
          target:
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      - output:
          source: message

  # Local RIND server log files (for development/local runs)
  - job_name: rind-local-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: rind-local
          service: dns-server
          environment: local
          __path__: /var/log/rind/rind_*.log
    pipeline_stages:
      # Handle both JSON and text format logs
      - match:
          selector: '{job="rind-local"}'
          stages:
            # Try to parse as JSON first (for structured logs)
            - json:
                expressions:
                  timestamp: timestamp
                  level: level
                  message: message
                  target: target
                  filename: filename
                  line_number: line_number
                  threadId: threadId
                  fields: fields
            # If JSON parsing fails, treat as plain text
            - match:
                selector: '{level=""}'
                stages:
                  - regex:
                      expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)\s+(?P<level>\w+)\s+(?P<target>[\w:]+):\s*(?P<message>.*)$'
                  - labels:
                      level:
                      target:
                  - timestamp:
                      source: timestamp
                      format: RFC3339Nano
                  - output:
                      source: message
            # For JSON logs, set labels and output
            - match:
                selector: '{level!=""}'
                stages:
                  - labels:
                      level:
                      target:
                  - timestamp:
                      source: timestamp
                      format: RFC3339Nano
                  - output:
                      source: message

  # Canary script logs
  - job_name: rind-canary-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: rind-canary
          service: canary
          environment: local
          __path__: /var/log/rind/dns-canary-*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3})\s+-\s+(?P<level>\w+)\s+-\s+(?P<message>.*)$'
      - labels:
          level:
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05,000'
      - output:
          source: message