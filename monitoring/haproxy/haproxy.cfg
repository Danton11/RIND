global
    daemon
    log stdout local0 info
    # stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # Performance tuning
    maxconn 4096
    nbthread 2
    
    # Security (disabled for Docker)
    # chroot /var/lib/haproxy
    
defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 3s
    
    retries 3
    
    # Error pages (using default built-in pages)
    # errorfile 400 /etc/haproxy/errors/400.http
    # errorfile 403 /etc/haproxy/errors/403.http
    # errorfile 408 /etc/haproxy/errors/408.http
    # errorfile 500 /etc/haproxy/errors/500.http
    # errorfile 502 /etc/haproxy/errors/502.http
    # errorfile 503 /etc/haproxy/errors/503.http
    # errorfile 504 /etc/haproxy/errors/504.http

# ============================================================================
# STATS & MONITORING
# ============================================================================

frontend stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-node
    
    # Prometheus metrics endpoint
    http-request use-service prometheus-exporter if { path /stats/prometheus }

# ============================================================================
# DNS LOAD BALANCING (TCP - HAProxy doesn't support UDP load balancing easily)
# Note: For production UDP load balancing, consider using nginx stream module
# ============================================================================

# For now, we'll skip DNS load balancing and focus on API load balancing
# DNS clients can connect directly to either server

# ============================================================================
# API LOAD BALANCING (HTTP)
# ============================================================================

frontend api_frontend
    bind *:80
    mode http
    
    # Request logging
    option httplog
    capture request header Host len 32
    capture request header User-Agent len 64
    capture response header Content-Type len 32
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Rate limiting (basic)
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 100 }
    
    # Route to API backend
    default_backend api_servers

backend api_servers
    mode http
    balance roundrobin
    
    # Health checks
    option httpchk GET /records
    http-check expect status 200
    
    # Connection settings
    option http-server-close
    option forwardfor
    
    # API server instances
    server api-primary dns-server-primary:8080 check inter 5s fall 3 rise 2 weight 100 maxconn 1000
    server api-secondary dns-server-secondary:8080 check inter 5s fall 3 rise 2 weight 100 maxconn 1000

# ============================================================================
# MONITORING ENDPOINTS
# ============================================================================

frontend monitoring_frontend
    bind *:8405
    mode http
    
    # Route monitoring requests
    acl is_prometheus path_beg /prometheus
    acl is_grafana path_beg /grafana
    acl is_loki path_beg /loki
    
    use_backend prometheus_backend if is_prometheus
    use_backend grafana_backend if is_grafana
    use_backend loki_backend if is_loki
    
    default_backend api_servers

backend prometheus_backend
    mode http
    server prometheus prometheus:9090 check

backend grafana_backend
    mode http
    server grafana grafana:3000 check

backend loki_backend
    mode http
    server loki loki:3100 check
 
