version: '3.8'

services:
  # ============================================================================
  # DNS SERVER CLUSTER - High Availability Setup
  # ============================================================================
  
  dns-server-primary:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: rind-dns-primary
    ports:
      - "12312:12312/udp"  # Primary DNS port
      - "8080:8080/tcp"    # Primary API port
      - "9091:9090/tcp"    # Metrics port
    environment:
      - RUST_LOG=info
      - DNS_BIND_ADDR=0.0.0.0:12312
      - API_BIND_ADDR=0.0.0.0:8080
      - METRICS_PORT=9090
      - SERVER_ID=dns-primary
      - INSTANCE_ID=rind-dns-primary
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - DISABLE_FILE_LOGGING=true
    volumes:
      - ../dns_records.txt:/app/dns_records.txt
      - dns_data_primary:/app/data
    networks:
      - rind-network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9090"
      - "prometheus.io/path=/metrics"
      - "com.rind.service=dns-server"
      - "com.rind.role=primary"
    healthcheck:
      test: ["CMD", "timeout", "5s", "bash", "-c", "</dev/tcp/localhost/8080"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  dns-server-secondary:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: rind-dns-secondary
    ports:
      - "12313:12312/udp"  # Secondary DNS port
      - "8081:8080/tcp"    # Secondary API port
      - "9092:9090/tcp"    # Metrics port
    environment:
      - RUST_LOG=info
      - DNS_BIND_ADDR=0.0.0.0:12312
      - API_BIND_ADDR=0.0.0.0:8080
      - METRICS_PORT=9090
      - SERVER_ID=dns-secondary
      - INSTANCE_ID=rind-dns-secondary
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - DISABLE_FILE_LOGGING=true
    volumes:
      - ../dns_records.txt:/app/dns_records.txt
      - dns_data_secondary:/app/data
    networks:
      - rind-network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9090"
      - "prometheus.io/path=/metrics"
      - "com.rind.service=dns-server"
      - "com.rind.role=secondary"
    healthcheck:
      test: ["CMD", "timeout", "5s", "bash", "-c", "</dev/tcp/localhost/8080"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  # ============================================================================
  # LOAD BALANCER - HAProxy for DNS and API traffic
  # ============================================================================
  
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: rind-load-balancer
    ports:
      # - "53:53/udp"        # DNS port (not supported by HAProxy)
      - "80:80/tcp"        # HTTP API load balancer
      - "8404:8404/tcp"    # HAProxy stats
    volumes:
      - ../monitoring/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - rind-network
    depends_on:
      - dns-server-primary
      - dns-server-secondary
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8404"
      - "prometheus.io/path=/stats/prometheus"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - production

  # ============================================================================
  # MONITORING STACK - Prometheus, Grafana, Loki
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: rind-prometheus
    ports:
      - "9090:9090/tcp"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - rind-network
    depends_on:
      - dns-server-primary
      - dns-server-secondary
    labels:
      - "com.rind.service=monitoring"
      - "com.rind.component=metrics"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  grafana:
    image: grafana/grafana:10.2.0
    container_name: rind-grafana
    ports:
      - "3000:3000/tcp"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=rind-admin-2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - rind-network
    depends_on:
      - prometheus
      - loki
    labels:
      - "com.rind.service=monitoring"
      - "com.rind.component=visualization"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  loki:
    image: grafana/loki:2.9.0
    container_name: rind-loki
    ports:
      - "3100:3100/tcp"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ../monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - rind-network
    labels:
      - "com.rind.service=monitoring"
      - "com.rind.component=logs"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  promtail:
    image: grafana/promtail:2.9.0
    container_name: rind-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ../monitoring/loki/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../logs:/var/log/rind:ro
    networks:
      - rind-network
    depends_on:
      - loki
    labels:
      - "com.rind.service=monitoring"
      - "com.rind.component=log-collection"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # ============================================================================
  # SYSTEM METRICS - Node Exporter for infrastructure monitoring
  # ============================================================================
  
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: rind-node-exporter
    ports:
      - "9100:9100/tcp"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.cpu'
      - '--collector.meminfo'
      - '--collector.diskstats'
      - '--collector.filesystem'
      - '--collector.netdev'
      - '--collector.loadavg'
      - '--collector.systemd'
      - '--collector.processes'
      - '--web.listen-address=:9100'
      - '--log.level=info'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
    networks:
      - rind-network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9100"
      - "prometheus.io/path=/metrics"
      - "com.rind.service=monitoring"
      - "com.rind.component=system-metrics"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    pid: host
    privileged: true

  # Container-specific metrics exporter
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: rind-cadvisor
    ports:
      - "8082:8080/tcp"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - rind-network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"
      - "com.rind.service=monitoring"
      - "com.rind.component=container-metrics"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    privileged: true
    devices:
      - /dev/kmsg

  # RIND-specific system metrics exporter
  system-metrics-exporter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.system-metrics
    container_name: rind-system-metrics
    ports:
      - "8091:8091/tcp"
    environment:
      - METRICS_PORT=8091
      - METRICS_HOST=0.0.0.0
      - PYTHONUNBUFFERED=1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../dns_records.txt:/app/dns_records.txt:ro
    networks:
      - rind-network
    depends_on:
      - dns-server-primary
      - dns-server-secondary
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8091"
      - "prometheus.io/path=/metrics"
      - "com.rind.service=monitoring"
      - "com.rind.component=rind-system-metrics"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

  # ============================================================================
  # ALERTING - AlertManager for notifications
  # ============================================================================
  
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: rind-alertmanager
    ports:
      - "9093:9093/tcp"
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    volumes:
      - ../monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - rind-network
    depends_on:
      - prometheus
    labels:
      - "com.rind.service=monitoring"
      - "com.rind.component=alerting"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - production

  # ============================================================================
  # TESTING & UTILITIES
  # ============================================================================
  
  dns-tester:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: rind-dns-tester
    command: ["./test_runner"]
    environment:
      - RUST_LOG=info
      - DNS_TARGET_HOST=dns-server-primary
      - DNS_TARGET_PORT=12312
      - API_TARGET_HOST=dns-server-primary
      - API_TARGET_PORT=8080
      - TEST_DURATION=300
      - CONCURRENT_QUERIES=100
    networks:
      - rind-network
    depends_on:
      - dns-server-primary
      - dns-server-secondary
    profiles:
      - testing
    restart: "no"

  record-manager:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: rind-record-manager
    command: ["./add_records"]
    environment:
      - RUST_LOG=info
      - API_TARGET_HOST=dns-server-primary
      - API_TARGET_PORT=8080
    volumes:
      - ../dns_records.txt:/app/dns_records.txt
    networks:
      - rind-network
    depends_on:
      - dns-server-primary
    profiles:
      - utilities
    restart: "no"

  # ============================================================================
  # PERFORMANCE TESTING - Continuous benchmarking
  # ============================================================================
  
  benchmark-runner:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: rind-benchmark
    command: ["cargo", "bench", "--bench", "dns_benchmarks"]
    environment:
      - RUST_LOG=info
      - BENCHMARK_TARGET=dns-server-primary:12312
      - BENCHMARK_DURATION=60
      - BENCHMARK_THREADS=4
    volumes:
      - benchmark_results:/app/target/criterion
    networks:
      - rind-network
    depends_on:
      - dns-server-primary
      - dns-server-secondary
    profiles:
      - benchmarking
    restart: "no"

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  rind-network:
    driver: bridge
    name: rind-fullstack
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.rind.network=fullstack"

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  # DNS Server Data
  dns_data_primary:
    driver: local
    labels:
      - "com.rind.volume=dns-data"
      - "com.rind.instance=primary"
  
  dns_data_secondary:
    driver: local
    labels:
      - "com.rind.volume=dns-data"
      - "com.rind.instance=secondary"
  
  # Monitoring Data
  prometheus_data:
    driver: local
    labels:
      - "com.rind.volume=monitoring"
      - "com.rind.component=prometheus"
  
  grafana_data:
    driver: local
    labels:
      - "com.rind.volume=monitoring"
      - "com.rind.component=grafana"
  
  loki_data:
    driver: local
    labels:
      - "com.rind.volume=monitoring"
      - "com.rind.component=loki"
  
  alertmanager_data:
    driver: local
    labels:
      - "com.rind.volume=monitoring"
      - "com.rind.component=alertmanager"
  
  # Testing Data
  benchmark_results:
    driver: local
    labels:
      - "com.rind.volume=testing"
      - "com.rind.component=benchmarks"